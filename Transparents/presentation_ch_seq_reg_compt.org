#+SETUPFILE: ./setup_slides

* Circuit séquentiels: registres et compteurs
** Objectifs
- Se familiariser avec les principaux circuits séquentiels classiques:
  registres, registres à décalage, compteurs
- Savoir comment sont implémentées les différentes opérations:
  chargement, remise à zéro, comptage vers le haut/bas, décalage
- Utiliser des compteurs pour générer des séquences de
  synchronisation
- Faire la distinction entre compteur synchrone et compteur asynchrone

** Registres

- Un registre est un groupe de bascules activées par un même signal d'horloge.

- Chaque bascule permet de stocker un bit en mémoire.

- Différentes configurations d'interconnexion entre les bascules et éventuellement des composants combinatoires permettent de concevoir des types de registres pouvant remplir des rôles variés.

** Registre parallèle à quatre bits

- La figure [[fig-regist_4]] montre un registre parallèle de quatre bits, qui permet de stocker quatre valeurs binaires indépendantes.

- Le schéma du bas est une représentation symbolique du registre, dans laquelle on représente les entrées et sorties comme des vecteurs de quatre bits.

** Registre parallèle à quatre bits


#+CAPTION:  Registre parallèle à quatre bits
#+attr_latex: :scale 0.75
#+NAME:fig-regist_4
[[file:../Images_svg/regist_4.svg]]

** Chargement parallèle

- Si on veut concevoir un registre parallèle polyvalent, on doit le munir de la possibilité de le charger à partir des entrées ou de maintenir les valeurs déjà mémorisées.

- On ajoutera donc une entrée /charge/ au registre pour contrôler ces opérations.

- Pour mettre en oeuvre ce chargement/maintien, il faut un peu de
réflexion.

- Il serait possible d'agir (à la façon d'un signal /enable/ via une porte ET, par exemple) sur l'entrée d'horloge des bascules pour empêcher leur contenu d'être affecté par les entrées.

- Mais alors, on briserait le principe de synchronisation qui veut que tous les éléments d'un système soient commandés en même temps par une même horloge.

** Mise à jour

La solution consiste à toujours mettre à jour le contenu des bascules: 

1) Lorsque /charge/ est inactif (fonction maintien), la sortie de chaque bascule, réacheminée à l'entrée, est sélectionnée pour récrire le même contenu.
2) Lorsque /charge/ est actif (fonction chargement), c'est l'entrée externe qui est sélectionnée pour écrire un nouveau contenu.

** Sélection de l'entrée des cellules

- La sélection se fait au moyen d'un multiplexeur deux-vers-un à l'entrée de chaque bascule.

- La figure [[fig-reg_4_paral]] montre le schéma du registre chargeable.

** Registre parallèle à quatre bits chargeable

#+CAPTION:  Registre parallèle à quatre bits chargeable
#+attr_latex: :scale 0.4
#+NAME:fig-reg_4_paral
[[file:../Images_svg/reg_4_paral.svg]]

** Registres à décalage

- Un registre à décalage consiste en une chaîne de bascules, la sortie de l'une reliée à l'entrée de la suivante.

- La figure [[fig-shift4]] montre un registre à décalage de quatre bits.

- À chaque coup d'horloge, l'entrée est insérée dans la première bascule, à droite, et le contenu du registre est décalé d'une position vers la gauche.

- La sortie provient de la dernière bascule à droite.

** Registre à décalage 4 bits

#+CAPTION:  Registre à décalage 4 bits
#+attr_latex: :scale 0.75
#+NAME:fig-shift4
[[file:../Images_svg/shift4.svg]]

** Sélection de l'entrée des cellules

- En utilisant un multiplexeur quatre-vers-un pour sélectionner ce qui sera inséré dans une bascule, il est possible de concevoir un registre à décalage universel.

- Les différentes opérations sont le /maintien/, le /décalage à droite/ avec entrée \(G\), le /décalage à gauche/ avec entrée \(D\) et le /chargement parallèle/, avec les entrées \(I_i, i=1, \ldots, 4\).

** Codes de sélection

- Les différentes opérations sont commandées par les deux signaux de sélection, comme indiqué dans le tableau [[tab-shift_oper]].

#+CAPTION:  Codes de sélection et opérations
#+NAME:tab-shift_oper
| Sél. | Action               |
|------+----------------------|
|   00 | Maintien             |
|   01 | Décalage à droite    |
|   10 | Décalage à gauche    |
|   11 | Chargement parallèle |

** Registre à décalage universel

#+CAPTION:  Registre à décalage universel
#+attr_latex: :scale 0.75
#+NAME:fig-shift4_univ
[[file:../Images_svg/shift4_univ.svg]] 

** Utilisations

- Les registres à décalage sont notamment utilisés pour convertir des données parallèles en données sérielles et /vice versa/, des opérations très utiles dans le contexte d'interfaces de communication.

- On peut également s'en servir pour faire des multiplications ou divisions par deux, comme on l'a vu précédemment.


** Compteurs

- Un registre dont la séquence d'états est systématique est appelé un *compteur*.

- Le comptage peut être contrôlé par une entrée spécifique ou par l'entrée d'horloge.

- La séquence d'états est toujours la même pour un type de compteur donné.

- Par exemple, les états d'un compteur binaire à deux bits suivent la séquence \(00 \rightarrow 01 \rightarrow 10 \rightarrow 11 \rightarrow 00 \ldots\) La sortie correspond directement aux bits d'état.

- On distingue les compteurs *asynchrones* et les compteurs *synchrones*.

- Quel que soit le type de compteur, il y a toujours un retour vers l'état initial, car la séquence d'états est un cycle.

** Compteur asynchrone

- Dans un compteur binaire asynchrone, la sortie d'une bascule de poids moins significatif est acheminée à l'entrée d'horloge de la bascule suivante.

- C'est la transition de la sortie de la bascule de poids moins significatif qui déclenche la bascule suivante.

- La figure [[fig-rippleT]] montre un compteur asynchrone construit à partir de bascules T.

- La séquence de sortie est donnée dans le tableau [[tab-seq_compt_3]].

- On peut voir qu'après huit étapes, la séquence se répète.

** Compteur asynchrone

#+CAPTION:  Compteur asynchrone
#+attr_latex: :scale 0.75
#+NAME:fig-rippleT
[[file:../Images_svg/rippleT3.svg]]


** Séquence du compteur

#+CAPTION:  Séquence du compteur
#+NAME:tab-seq_compt_3
| \(A_2\) | \(A_1\) | \(A_0\) |
|---------+---------+---------|
|       0 |       0 |       0 |
|       0 |       0 |       1 |
|       0 |       1 |       0 |
|       0 |       1 |       1 |
|       1 |       0 |       0 |
|       1 |       0 |       1 |
|       1 |       1 |       0 |
|       1 |       1 |       1 |
|       0 |       0 |       0 |

** Avantages et inconvénients

- Les compteurs asynchrones sont très simples, mais l'inconvénient est que les transitions d'état ne sont pas synchrones.

- En particulier, les bits d'état ne changent pas tous en même temps.

- Par exemple, si le compteur passe de 0111 à 1000, la sortie peut passer par des états intermédiaires parasites: 0111 $\rightarrow$ 0110 $\rightarrow$ 1100 $\rightarrow$ 1000.

** Compteur synchrone

- Dans un compteur synchrone, toutes les bascules sont commandées par un même signal d'horloge et les changements d'état sont synchronisés.

- Les changements d'état sont contrôlés par les signaux d'entrée appliqués aux bascules, comme dans le fonctionnement normal d'un circuit séquentiel synchrone.

- Le diagramme d'état d'un compteur trois bits (huit états) est un cycle, comme on peut le voir sur la figure [[fig-compt8_FSM]].

- Le tableau d'états correspondant est donné dans le tableau [[tab-compt8]].

** Diagramme d'état d'un compteur

#+CAPTION:  Diagramme d'état d'un compteur
#+attr_latex: :scale 0.5
#+NAME:fig-compt8_FSM
[[file:../Images_svg/compt8_FSM.svg]]

** Tableau d'état du compteur

#+CAPTION:  Tableau d'état du compteur
#+NAME:tab-compt8
| \(Z_2^n\) | \(Z_1^n\) | \(Z_0^n\) |   | \(Z_2^{n+1}\) | \(Z_1^{n+1}\) | \(Z_0^{n+1}\) |
|-----------+-----------+-----------+---+---------------+---------------+---------------|
|         0 |         0 |         0 |   |             0 |             0 |             1 |
|         0 |         0 |         1 |   |             0 |             1 |             0 |
|         0 |         1 |         0 |   |             0 |             1 |             1 |
|         0 |         1 |         1 |   |             1 |             0 |             0 |
|         1 |         0 |         0 |   |             1 |             0 |             1 |
|         1 |         0 |         1 |   |             1 |             1 |             0 |
|         1 |         1 |         0 |   |             1 |             1 |             1 |
|         1 |         1 |         1 |   |             0 |             0 |             0 |

** Décodeur de prochain état

Les expressions pour le décodeur de prochain état sont: 

$$  Z_2^{n+1} = Z_0^n \cdot Z_1^n \cdot (Z_2^{n})^\prime + (Z_0^{n})^\prime \cdot Z_2^n + (Z_1^{n})^\prime \cdot Z_2^n $$

$$  Z_1^{n+1} = Z_0^{n} \cdot (Z_1^{n})^\prime + (Z_0^{n})^\prime \cdot Z_1^n $$

$$  Z_0^{n+1} = (Z_0^{n})^\prime $$

** Schéma

Le schéma correspondant est donné à la figure [[fig-compt8]].

#+CAPTION:  Schéma logique du compteur à 3 bits
#+attr_latex: :scale 0.6
#+NAME:fig-compt8
[[file:../Images_svg/compt8.svg]]

** Fonctions supplémentaires

On peut ajouter aux compteurs des fonctions diverses: 

- comptage vers le haut, 
- comptage vers le bas, 
- préchargement parallèle, 
- remise à zéro, etc.

** Conception de compteurs

- Le compteur de la figure [[fig-compt8]] a été conçu comme un circuit séquentiel général, avec un décodeur de prochain état en forme /somme de produits/.

- Il est également possible de concevoir un compteur synchrone directement, sans passer par la méthodologie classique, en suivant un raisonnement tout simple.

- La bascule du bit le moins significatif \(Z_0\) doit changer d'état à tous les coups d'horloge.

- La bascule du bit suivant \(Z_1\) doit changer d'état seulement lorsque le bit précédent \(Z_0\) vaut 1.

- La bascule du bit suivant \(Z_2\) doit changer d'état seulement lorsque les bits précédents \(Z_1, Z_0\) valent tous deux 1.

** Principe de conception

Et on peut pousser le raisonnement pour un compteur quelconque:
#+BEGIN_QUOTE
la bascule d'un bit \(Z_i\)
doit changer d'état seulement lorsque les bits précédents
\(Z_{i-1},Z_{i-2},\ldots, Z_0\) valent tous 1.
#+END_QUOTE

** Exemple pour compteur 4 bits

- Le compteur à quatre bits de la figure [[fig-compt_4bits]] a été conçu selon cette approche, à partir de bascules JK.

- L'utilisation d'une porte ET par bascule permet de mettre en oeuvre les conditions.

- L'entrée \(E\) est un contrôle /enable/ pour activer le comptage.

- On a aussi prévu une sortie =Prochain= pour pouvoir connecter en cascade d'autres compteurs.

** Schéma logique du compteur à 4 bits

#+CAPTION:  Schéma logique du compteur à 4 bits
#+attr_latex: :scale 0.5
#+NAME:fig-compt_4bits
[[file:../Images_svg/compt_4bits.svg]]

** Comptage vers le bas

Si on réfléchit de la même façon pour le comptage vers le bas, on constate
que la règle devient:

#+BEGIN_QUOTE
la bascule d'un bit \(Z_i\) doit changer d'état
seulement lorsque les bits précédents \(Z_{i-1},Z_{i-2},\ldots, Z_0\)
valent tous 0.
#+END_QUOTE

Cette fois-ci, les conditions se baseront sur les sorties
complémentées des bascules précédentes.

** Compteur bidirectionnel

- En combinant les deux conditions au moyen d'un multiplexeur deux-vers-un, il est facile de concevoir un compteur haut/bas, comme
illustré sur la figure [[fig-compt_updown]].

** Compteur haut/bas à 4 bits

#+CAPTION:  Schéma logique du compteur haut/bas à 4 bits
#+attr_latex: :scale 0.4
#+NAME:fig-compt_updown
[[file:../Images_svg/compt_updown.svg]]

** Compteur en anneau

- Un compteur en anneau est un registre à décalage connecté en boucle où une seule bascule est active à la fois.

- Il y a donc dans la sortie un seul bit 1, qui se décale de façon cyclique: \(0010 \rightarrow 0001 \rightarrow 1000 \rightarrow 0100 \rightarrow 0010, \ldots\) 

- La figure [[fig-ring4]] illustre un compteur en anneau de quatre bits.

** Compteur en anneau à 4 bits

#+CAPTION:  Compteur en anneau à 4 bits
#+attr_latex: :scale 0.75
#+NAME:fig-ring4
[[file:../Images_svg/ring4.svg]]

** Compteur en anneau ... 2


- Une entrée =Init= permet d'injecter un bit 1 dans le registre au début.

- La trace montre les formes d'onde obtenues.

- On utilise fréquemment ce type de compteur pour générer des signaux de synchronisation.

- En effet, chaque sortie devient active à son tour dans le cycle, pendant une période d'horloge.

** Compteur Johnson

- Un compteur Johnson permet de doubler le nombre d'états distincts par rapport au compteur en anneau en injectant le complément du dernier bit dans l'entrée du registre à décalage.

- La figure [[fig-johnson4]] illustre un compteur en anneau Johnson de quatre bits, de même que la trace de fonctionnement.

- La séquence d'états est donnée dans le tableau [[tab-seqjohn4]].

** Compteur Johnson à 4 bits

#+CAPTION:  Compteur Johnson à 4 bits
#+attr_latex: :scale 0.75
#+NAME:fig-johnson4
[[file:../Images_svg/johnson4.svg]]

** Séquence d'états du compteur Johnson

#+CAPTION:  Séquence d'états du compteur Johnson
#+NAME:tab-seqjohn4
| No | \(a\) | \(b\) | \(c\) | \(d\) | ET requis              |
|----+-------+-------+-------+-------+------------------------|
|   1 |     0 |     0 |     0 |     0 | \(a^\prime d^\prime\) |
|   2 |     1 |     0 |     0 |     0 | \(a b^\prime\)        |
|   3 |     1 |     1 |     0 |     0 | \(b c^\prime\)        |
|   4 |     1 |     1 |     1 |     0 | \(c^\prime d^\prime\) |
|   5 |     1 |     1 |     1 |     1 | \(a d^\prime\)        |
|   6 |     0 |     1 |     1 |     1 | \(a^\prime b\)        |
|   7 |     0 |     0 |     1 |     1 | \(b^\prime c\)        |
|   8 |     0 |     0 |     0 |     1 | \(c^\prime d\)        |

** Signaux de synchronisation à partir des sorties Johnson

- On peut construire des signaux de synchronisation distincts en combinant deux par deux au moyen d'une porte ET des signaux de sortie voisins (dans le cycle) ou leurs compléments.

- Le tableau [[tab-seqjohn4]] donne les paires de sorties à combiner pour ce faire avec le compteur Johnson de quatre bits.

- Nous avons appliqué ce principe à un compteur Johnson de deux bits, présenté sur la figure [[fig-johnson2_quad_decode]].

- La figure montre une trace d'exécution avec les signaux de sortie.

- On y voit que chacun des quatre signaux est activé à son tour.

** Compteur Johnson à 2 bits et circuit de décodage

#+CAPTION:  Compteur Johnson à 2 bits et circuit de décodage pour signaux de synchronisation
#+attr_latex: :scale 0.75
#+NAME:fig-johnson2_quad_decode
[[file:../Images_svg/johnson2_quad_decode.svg]]

** Signaux en quadrature

Si on s'intéresse aux sorties des bascules de ce même compteur
Johnson, on peut voir sur la trace d'exécution de la figure
[[fig-johnson2_quad]] qu'on obtient des signaux en *quadrature*,
c'est-à-dire que les sorties sont déphasées de 90 degrés les unes par
rapport aux autres, comme le sont des fonctions \(\sin(), \cos(),
-\sin(), -\cos()\).

** Génération de signaux en quadrature

#+CAPTION:  Signaux en quadrature obtenus au moyen d'un compteur Johnson à 2 bits
#+attr_latex: :scale 0.75
#+NAME:fig-johnson2_quad
[[file:../Images_svg/johnson2_quad.svg]] 

** Diviseur de fréquence

- Un compteur peut être utilisé pour diviser la fréquence d'un signal périodique.

- Par exemple, la sortie d'un compteur à un bit change d'état à tous les deux coups d'horloge, ce qui constitue une division par deux de la fréquence d'horloge.

- Cette approche permet naturellement des divisions par des puissances de deux.

- On peut aussi utiliser un compteur Johnson, qui permettra alors, selon le nombre d'étages du compteur, des divisions de fréquence par des diviseurs, comme trois ou cinq, qui ne sont pas des puissances de deux.

** Compteur à chargement parallèle

- Un compteur à chargement parallèle est illustré à la figure [[fig-comptchargement]].

- En activant l'entrée =Compte=, le comptage se fait vers le haut.

- En activant l'entrée =Charge=, les entrées \( I_i, i=0, \ldots, 3\) sont insérées dans les bascules.

- Il y a aussi une sortie =ov= qui indique lorsque le compteur atteint sa valeur maximale.

- Cette sortie peut être utilisée pour activer un autre compteur pour des bits de plus haut niveau.


** Compteur à chargement parallèle

#+CAPTION:  Compteur à chargement parallèle
#+attr_latex: :scale 0.4
#+NAME:fig-comptchargement
[[file:../Images_svg/comptchargement.svg]]

** Trace d'exécution, de 0 à 15

- La trace d'exécution de la figure [[fig-compt_chargement_tracecompte]] montre le comptage de 4 jusqu'à 15 et retour à 0.

- On voit le signal =ov= s'activer sur 15.

#+CAPTION:  Trace d'exécution, de 0 à 15
#+attr_latex: :scale 0.75
#+NAME:fig-compt_chargement_tracecompte
[[file:../Images_svg/compt_chargement_tracecompte.svg]]

** Trace d'exécution, de 0 à 5 et chargement de 12

- La trace de la figure [[fig-compt_chargement_trace_charge]]  montre le compteur qui passe de 0 à 5, puis un chargement parallèle de la valeur 12.

#+CAPTION:   Trace d'exécution, de 0 à 5 et chargement de 12
#+attr_latex: :scale 0.75
#+NAME:fig-compt_chargement_trace_charge
[[file:../Images_svg/compt_chargement_trace_charge.svg]]

** Compteur modulo

- On peut réaliser aisément un compteur modulo dont le cycle est plus court que le maximum possible, en utilisant un compteur avec chargement parallèle.

- Par exemple, pour réaliser un compteur qui compte de 0 jusqu'à 12, il suffit de décoder au moyen d'une porte ET l'état qui doit être le dernier du cycle, et d'utiliser le signal de sortie obtenu pour charger la valeur 0 dans le compteur.

- On obtient ainsi un compteur modulo-13, dont le cycle compte 13 états.

- La figure illustre le compteur modulo-13, de même qu'une trace d'exécution sur laquelle on voit le passage de 12 à 0.

** Compteur modulo-13

#+CAPTION:   Compteur modulo-13
#+attr_latex: :scale 0.75
#+NAME:fig-compt_mod13
[[file:../Images_svg/compt_mod13.svg]]

On pourrait aussi réaliser un compteur qui compte par exemple de 4 à
15, en utilisant cette fois la sortie =ov= pour activer le chargement
d'une valeur initiale 4.

